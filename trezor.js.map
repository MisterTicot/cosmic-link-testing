{"version":3,"sources":["webpack:///../trezor-wallet/es5/trezor-tx.js","webpack:///../trezor-wallet/es5/tx-transformer.js","webpack:///../trezor-wallet/es5/index.js"],"names":["_typeof","require","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","Buffer","TrezorTransaction","_TxTransformer","transaction","_this","this","call","rules","network","fee","Number","operations","length","minTime","maxTime","timebounds","forEach","op","type","assetType","assetCode","authorize","limit","amount","signer","signer_type","signer_key","key","signer_weight","weight","console","log","toXDR","JSON","stringify","toFixed","asset","code","issuer","assetsArray","array","map","buffer","value","from","toString","date","Date","memo","text","id","hash","price","n","d","sequence","module","exports","_require","CosmicLink","specs","transform","field","fieldType","odesc","result","TxTransformer","tx","tdesc","transactionOptionalFields","o","connection","disconnection","_regeneratorRuntime","_asyncToGenerator","trezor","TrezorConnect","TrezorTx","makePath","account","index","internalFlag","path","concat","connect","_connect","apply","arguments","mark","_callee4","wrap","_context4","prev","next","stellarGetAddress","sent","success","publicKey","payload","address","onConnect","Error","error","stop","reset","name","onDisconnect","register","appUrl","email","manifest","_ref","_callee","_context","undefined","abrupt","_x","_x2","_x3","sign","_ref2","_callee2","StellarSdk","keypair","hint","signature","decorated","_context2","stellarSignTransaction","networkPassphrase","Keypair","fromPublicKey","signatureHint","xdr","DecoratedSignature","signatures","push","_x4","disconnect","_callee3","_context3","on","event"],"mappings":"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","file":"trezor.js","sourcesContent":["\"use strict\";\n/**\n * Trezor Tx - A class that creates a Trezor-formatted transaction from any\n * format of transaction.\n */\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar Buffer = require(\"@cosmic-plus/base/es5/buffer\");\n\nvar TxTransformer = require(\"./tx-transformer\");\n/* Definition */\n\n\nvar TrezorTransaction =\n/*#__PURE__*/\nfunction (_TxTransformer) {\n  _inherits(TrezorTransaction, _TxTransformer);\n\n  function TrezorTransaction(transaction) {\n    var _this;\n\n    _classCallCheck(this, TrezorTransaction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrezorTransaction).call(this, rules, transaction));\n    delete _this.network; // Fees\n\n    if (!_this.fee) _this.fee = 100 * _this.operations.length;else _this.fee = Number(_this.fee) / 10000000; // Timebounds\n\n    if (_this.minTime || _this.maxTime) {\n      _this.timebounds = {\n        minTime: _this.minTime || null,\n        maxTime: _this.maxTime || null\n      };\n      delete _this.minTime;\n      delete _this.maxTime;\n    } // Operations\n\n\n    _this.operations.forEach(function (op) {\n      if (op.type === \"allowTrust\") {\n        op.assetType = op.assetCode.length <= 4 ? 1 : 2;\n        op.authorize = op.authorize ? 1 : 0;\n      } else if (op.type === \"changeTrust\") {\n        notSupported(\"operation changeTrust\");\n        if (!op.limit) op.limit = rules.amount(\"922337203685.4775807\");\n      } else if (op.type === \"createPassiveSellOffer\") {\n        op.type = \"createPassiveOffer\";\n      } else if (op.type === \"manageSellOffer\") {\n        op.type = \"manageOffer\";\n      } else if (op.type === \"manageBuyOffer\") {\n        notSupported(\"operation manageBuyOffer\");\n      } else if (op.type === \"setOptions\") {\n        if (op.signer) {\n          notSupported(\"set signer\");\n          op.signer_type = op.signer.type;\n          op.signer_key = op.signer.key;\n          op.signer_weight = op.signer.weight;\n          delete op.signer;\n        }\n      }\n    }); // DEBUG\n\n\n    console.log(\"XDR\", transaction.toXDR());\n    console.log(\"Trezor TX\", JSON.stringify(_assertThisInitialized(_this), null, 2));\n    return _this;\n  }\n\n  return TrezorTransaction;\n}(TxTransformer);\n/* Rules */\n\n\nvar rules = {};\n\nrules.amount = function (amount) {\n  return Number(amount * 10000000).toFixed(0);\n};\n\nrules.asset = function (asset) {\n  if (asset.code === \"XLM\" && !asset.issuer) return null;\n  asset.type = asset.code.length <= 4 ? 1 : 2;\n  return asset;\n};\n\nrules.assetsArray = function (array) {\n  return array.map(rules.asset);\n};\n\nrules.buffer = function (buffer) {\n  if (!buffer.value) return \"\";\n\n  if (buffer.type === \"base64\") {\n    return Buffer.from(buffer.value, \"base64\").toString(\"hex\");\n  } else {\n    return Buffer.from(buffer.value).toString(\"hex\");\n  }\n};\n\nrules.date = function (date) {\n  return Number(new Date(date)) / 1000;\n};\n\nrules.memo = function (memo) {\n  if (memo.type === \"text\") {\n    memo.type = 1;\n    memo.text = memo.value;\n  } else if (memo.type === \"base64\") {\n    notSupported(\"binary memo text\");\n  } else if (memo.type === \"id\") {\n    memo.type = 2;\n    memo.id = memo.value;\n  } else if (memo.type === \"hash\") {\n    memo.type = 3;\n    memo.hash = memo.value;\n  } else if (memo.type === \"return\") {\n    memo.type = 4;\n    memo.hash = memo.value;\n  }\n\n  delete memo.value;\n  return memo;\n};\n\nrules.price = function (price) {\n  if (_typeof(price) !== \"object\") return {\n    n: Number(price),\n    d: 1\n  };else return price;\n};\n\nrules.sequence = function (sequence) {\n  return Number(sequence);\n};\n\nrules.signer = function (signer) {\n  signer.key = signer.value;\n  if (signer.type === \"key\") signer.type = 0;else if (signer.type === \"hash\") signer.type = 1;else if (signer.type === \"tx\") signer.type = 2;\n  return signer;\n};\n/* Helpers */\n\n\nfunction notSupported(feature) {} //  throw new Error(`This feature is not supported yet: ${feature}.`)\n\n/* Export */\n\n\nmodule.exports = TrezorTransaction;","\"use strict\";\n/**\n * Tx Transformer\n *\n * Derives new formats from CosmicLink Transitional Description.\n */\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _require = require(\"cosmic-lib\"),\n    CosmicLink = _require.CosmicLink,\n    specs = _require.specs;\n/* Definition */\n\n\nvar TxTransformer = function TxTransformer(rules, tx) {\n  var _this = this;\n\n  _classCallCheck(this, TxTransformer);\n\n  var tdesc = new CosmicLink(tx).tdesc;\n  specs.transactionOptionalFields.forEach(function (field) {\n    var value = tdesc[field];\n    if (value) _this[field] = transform.field(rules, field, value);\n  });\n  this.operations = tdesc.operations.map(function (o) {\n    return transform.odesc(rules, o);\n  });\n};\n/* Routines */\n\n\nvar transform = {};\n\ntransform.field = function (rules, field, value) {\n  var type = specs.fieldType[field];\n  return rules[type] ? rules[type](value) : value;\n};\n\ntransform.odesc = function (rules, odesc) {\n  var result = {};\n\n  for (var field in odesc) {\n    result[field] = transform.field(rules, field, odesc[field]);\n  }\n\n  return result;\n};\n/* Export */\n\n\nmodule.exports = TxTransformer;","\"use_strict\";\n/**\n * This is a convenient wrapper around the official\n * [TrezorConnect](https://github.com/trezor/connect) library.\n *\n *\n * It enables you to connect to Trezor devices and sign Stellar transactions in\n * a few lines of code:\n *\n * ```js\n * // Step 1: Register to Trezor Connect Manifest\n * trezorWallet.register(\"example.org\", \"dev@example.org\")\n *\n * // Step 2: Connect\n * await trezorWallet.connect()\n *\n * // Step 3: Get public key\n * const pubkey = trezorWallet.publicKey\n *\n * // Step 4: Sign\n * await trezorWallet.sign(transaction)\n * ```\n *\n * This library is browser-only.\n *\n * **Beta Release**\n *\n * This is a beta release that is made public for testing purpose. While the\n * library is stable & secure, several issues are still being worked out with\n * Trezor teams.\n *\n * A few operations & parameters are not supported yet. An explicit error\n * message will get thrown if you try to sign a transaction including them:\n *\n * - Text memos using binary data,\n * - The `bumpSequence` operation,\n * - The `changeTrust` operation,\n * - The `inflation` operation,\n * - The `manageData` operation,\n * - The `manageBuyOffer` operation,\n * - Changing signers.\n *\n * If you encounter an unexpected error, please play the game and [fill an\n * issue](https://github.com/cosmic-plus/js-trezor-wallet/issues/new/choose).\n *\n * The public release will possibly contain one or more breaking changes.\n * Please check the [changelog](CHANGELOG.md) before upgrading.\n *\n * @exports trezorWallet\n */\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar trezor = exports;\n\nvar TrezorConnect = require(\"trezor-connect\")[\"default\"];\n\nvar Buffer = require(\"@cosmic-plus/base/es5/buffer\");\n\nvar TrezorTx = require(\"./trezor-tx\");\n/* Methods */\n\n\nvar connection, disconnection;\n/**\n * Registers yourself in the Trezor Connect Manifest. This provides them the\n * ability to reach you in case of any required maintenance.\n *\n * This subscription is mandatory.\n *\n * @see [Trezor Connect Manifest](https://github.com/trezor/connect/blob/develop/docs/index.md#trezor-connect-manifest)\n *\n * @param email {String} Developer email.\n * @param appUrl {String} Application URL.\n */\n\ntrezor.register = function (appUrl, email) {\n  TrezorConnect.manifest({\n    email: email,\n    appUrl: appUrl\n  });\n};\n/**\n * Waits for a connection with a Trezor wallet. If **account** is not provided,\n * acount 1 is used. The library will stop listening for a connection if\n * `trezorWallet.disconnect()` is called.\n *\n * Once the connection is established, you can use `await\n * trezorWallet.connect()` again at any time to ensure the device is still\n * connected.\n *\n * When switching to another **account**, it is possible to `await\n * trezorWallet.connect(new_account_number)` without prior disconnection.\n *\n * _Note:_ To stay consistent with the way Trezor list accounts, **account**\n * starts at 1 and account 1 BIP path is `m/44'/148'/0'`.\n *\n * @async\n * @param [account=1] {Number} Account number to connect to.\n */\n\n\ntrezor.connect =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(account, index, internalFlag) {\n    var path;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(account === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error(\"Account number starts at 1.\");\n\n          case 2:\n            // Compute bip path.\n            if (account === undefined) {\n              account = trezor.account - 1 || 0;\n              index = trezor.index || 0;\n              internalFlag = trezor.internalFlag || false;\n            }\n\n            path = makePath(account, index, internalFlag); // Ensure the disconnection process is finished.\n\n            if (!disconnection) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 7;\n            return disconnection;\n\n          case 7:\n            disconnection = null;\n\n          case 8:\n            // If the bip path is different we need to go through connect() again.\n            if (trezor.path !== path) {\n              reset();\n              /**\n               * Account number of the connected account.\n               * @var {Number}\n               */\n\n              trezor.account = account || 0;\n              /**\n               * BIP path of the connected account.\n               * @var {String}\n               */\n\n              trezor.path = path;\n              trezor.index = index || 0;\n              trezor.internalFlag = internalFlag || false;\n            } // Connect & update data only when needed.\n\n\n            if (!connection) connection = connect();\n            return _context.abrupt(\"return\", connection);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction makePath(account, index, internalFlag) {\n  var path = \"m/44'/148'/\".concat(account, \"'\");\n  if (index || internalFlag) path += internalFlag ? \"/1'\" : \"/0'\";\n  if (index) path += \"/\".concat(index, \"'\");\n  return path;\n}\n\nfunction connect() {\n  return _connect.apply(this, arguments);\n}\n/**\n * Prompts the user to accept **transaction** using the connected account of\n * their Trezor device.\n *\n * If the user accepts, adds the signature to **transaction**. Else, throws an\n * error.\n *\n * @async\n * @param transaction {Transaction} A StellarSdk Transaction\n */\n\n\nfunction _connect() {\n  _connect = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            // eslint-disable-next-line no-console\n            console.log(\"Attempting Trezor connection...\");\n            connection = TrezorConnect.stellarGetAddress({\n              path: trezor.path\n            });\n            _context4.next = 4;\n            return connection;\n\n          case 4:\n            result = _context4.sent;\n\n            if (!result.success) {\n              _context4.next = 10;\n              break;\n            }\n\n            /**\n             * PublicKey of the connected account.\n             * @var {String}\n             */\n            trezor.publicKey = result.payload.address;\n            onConnect();\n            _context4.next = 11;\n            break;\n\n          case 10:\n            throw new Error(result.payload.error);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _connect.apply(this, arguments);\n}\n\ntrezor.sign =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(transaction) {\n    var StellarSdk, result, keypair, hint, signature, decorated;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            StellarSdk = require(\"@cosmic-plus/base/es5/stellar-sdk\");\n\n            if (trezor.publicKey) {\n              _context2.next = 3;\n              break;\n            }\n\n            throw new Error(\"No Trezor connected.\");\n\n          case 3:\n            _context2.next = 5;\n            return TrezorConnect.stellarSignTransaction({\n              path: trezor.path,\n              networkPassphrase: transaction.networkPassphrase,\n              transaction: new TrezorTx(transaction)\n            });\n\n          case 5:\n            result = _context2.sent;\n\n            if (result.success) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error(result.payload.error);\n\n          case 8:\n            keypair = StellarSdk.Keypair.fromPublicKey(trezor.publicKey);\n            hint = keypair.signatureHint();\n            signature = Buffer.from(result.payload.signature, \"hex\");\n            decorated = new StellarSdk.xdr.DecoratedSignature({\n              hint: hint,\n              signature: signature\n            });\n            transaction.signatures.push(decorated); // DEBUG\n\n            console.log(\"signed\", transaction);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Close the connection with the Trezor device, or stop listening for one in\n * case a connection has not been established yet.\n * @async\n */\n\n\ntrezor.disconnect =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee3() {\n  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          onDisconnect();\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _callee3);\n}));\n\nfunction reset() {\n  connection = null;\n  var fields = [\"path\", \"account\", \"index\", \"internalFlag\", \"publicKey\"];\n  fields.forEach(function (name) {\n    delete trezor[name];\n  });\n}\n/* Event handlers */\n\n\nTrezorConnect.on(\"DEVICE_EVENT\", function (event) {\n  // eslint-disable-next-line no-console\n  console.log(\"DEVICE_EVENT\", console.log(event));\n  if (event.type === \"device-disconnect\") onDisconnect();else if (event.type === \"device-connect\") onConnect();\n});\n/**\n * _Function_ to execute on each connection.\n *\n * @category event\n * @var {Function}\n */\n\ntrezor.onConnect = null;\n\nfunction onConnect() {\n  // eslint-disable-next-line no-console\n  console.log(\"Trezor connected\");\n  if (typeof trezor.onConnect === \"function\") trezor.onConnect();\n}\n/**\n * _Function_ to execute on each disconnection.\n *\n * @category event\n * @var {Function}\n */\n\n\ntrezor.onDisconnect = null;\n\nfunction onDisconnect() {\n  // eslint-disable-next-line no-console\n  console.log(\"Trezor disconnected\");\n  reset();\n  if (typeof trezor.onDisconnect === \"function\") trezor.onDisconnect();\n}"],"sourceRoot":""}