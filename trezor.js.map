{"version":3,"sources":["webpack:///../trezor-wallet/es5/trezor-tx.js","webpack:///../trezor-wallet/es5/tx-transformer.js","webpack:///../trezor-wallet/es5/index.js"],"names":["_typeof","require","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","Buffer","StellarSdk","TrezorTransaction","_TxTransformer","transaction","_this","this","call","rules","network","fee","Number","operations","length","minTime","maxTime","timebounds","forEach","op","type","assetType","assetCode","authorize","limit","line","asset","signer","keypair","Keypair","fromPublicKey","key","rawPublicKey","toString","console","log","JSON","stringify","amount","toFixed","code","issuer","assetsArray","array","map","buffer","value","from","date","Date","memo","text","match","id","hash","price","n","d","sequence","module","exports","_require","CosmicLink","specs","transform","field","fieldType","odesc","result","TxTransformer","tx","tdesc","transactionOptionalFields","o","connection","_regeneratorRuntime","_asyncToGenerator","trezor","TrezorConnect","TrezorTx","connect","_connect","apply","arguments","mark","_callee3","wrap","_context3","prev","next","stellarGetAddress","path","showOnTrezor","sent","success","publicKey","payload","address","onConnect","Error","error","stop","reset","name","onDisconnect","register","appUrl","email","manifest","_callee","account","_args","_context","undefined","concat","abrupt","sign","_ref2","_callee2","hint","signature","decorated","_context2","stellarSignTransaction","networkPassphrase","signatureHint","xdr","DecoratedSignature","signatures","push","_x","disconnect","cancel","on","event"],"mappings":"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","file":"trezor.js","sourcesContent":["\"use strict\";\n/**\n * Trezor Tx - A class that creates a Trezor-formatted transaction from any\n * format of transaction.\n */\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar Buffer = require(\"@cosmic-plus/base/es5/buffer\");\n\nvar StellarSdk = require(\"@cosmic-plus/base/es5/stellar-sdk\");\n\nvar TxTransformer = require(\"./tx-transformer\");\n/* Definition */\n\n\nvar TrezorTransaction =\n/*#__PURE__*/\nfunction (_TxTransformer) {\n  _inherits(TrezorTransaction, _TxTransformer);\n\n  function TrezorTransaction(transaction) {\n    var _this;\n\n    _classCallCheck(this, TrezorTransaction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrezorTransaction).call(this, rules, transaction));\n    delete _this.network; // Fees\n\n    if (!_this.fee) _this.fee = 100 * _this.operations.length;else _this.fee = Number(_this.fee) / 10000000; // Timebounds\n\n    if (_this.minTime || _this.maxTime) {\n      _this.timebounds = {\n        minTime: _this.minTime == null ? null : _this.minTime,\n        maxTime: _this.maxTime == null ? null : _this.maxTime\n      };\n      delete _this.minTime;\n      delete _this.maxTime;\n    } // Operations\n\n\n    _this.operations.forEach(function (op) {\n      if (op.type === \"allowTrust\") {\n        op.assetType = op.assetCode.length <= 4 ? 1 : 2;\n        op.authorize = op.authorize ? 1 : 0;\n      } else if (op.type === \"changeTrust\") {\n        if (!op.limit) op.limit = \"9223372036854775807\";\n        op.line = op.asset;\n        delete op.asset;\n      } else if (op.type === \"createPassiveSellOffer\") {\n        op.type = \"createPassiveOffer\";\n      } else if (op.type === \"manageSellOffer\") {\n        op.type = \"manageOffer\";\n      } else if (op.type === \"manageBuyOffer\") {\n        notSupported(\"operation manageBuyOffer\");\n      } else if (op.type === \"setOptions\") {\n        if (op.signer && op.signer.type === 0) {\n          var keypair = StellarSdk.Keypair.fromPublicKey(op.signer.key);\n          op.signer.key = keypair.rawPublicKey().toString(\"hex\");\n        }\n      }\n    }); // DEBUG\n\n\n    console.log(\"Trezor TX\", JSON.stringify(_assertThisInitialized(_this), null, 2));\n    return _this;\n  }\n\n  return TrezorTransaction;\n}(TxTransformer);\n/* Rules */\n\n\nvar rules = {};\n\nrules.amount = function (amount) {\n  return Number(amount * 10000000).toFixed(0);\n};\n\nrules.asset = function (asset) {\n  if (asset.code === \"XLM\" && !asset.issuer) return null;\n  asset.type = asset.code.length <= 4 ? 1 : 2;\n  return asset;\n};\n\nrules.assetsArray = function (array) {\n  return array.map(rules.asset);\n};\n\nrules.buffer = function (buffer) {\n  if (!buffer.value) return \"\";\n\n  if (buffer.type === \"base64\") {\n    return Buffer.from(buffer.value, \"base64\").toString(\"hex\");\n  } else {\n    return Buffer.from(buffer.value).toString(\"hex\");\n  }\n};\n\nrules.date = function (date) {\n  return Number(new Date(date)) / 1000;\n};\n\nrules.memo = function (memo) {\n  if (memo.type === \"text\") {\n    memo.type = 1;\n    memo.text = memo.value;\n  } else if (memo.type === \"base64\") {\n    memo.type = 1;\n    memo.text = Buffer.from(memo.value, \"base64\").toString(\"utf8\");\n\n    if (memo.text.match(\"\\0\")) {\n      notSupported(\"binary text memo including NULL characters\");\n    }\n  } else if (memo.type === \"id\") {\n    memo.type = 2;\n    memo.id = memo.value;\n  } else if (memo.type === \"hash\") {\n    memo.type = 3;\n    memo.hash = memo.value;\n  } else if (memo.type === \"return\") {\n    memo.type = 4;\n    memo.hash = memo.value;\n  }\n\n  delete memo.value;\n  return memo;\n};\n\nrules.price = function (price) {\n  if (_typeof(price) !== \"object\") return {\n    n: Number(price),\n    d: 1\n  };else return price;\n};\n\nrules.sequence = function (sequence) {\n  return Number(sequence);\n};\n\nrules.signer = function (signer) {\n  signer.key = signer.value;\n  delete signer.value;\n  if (signer.type === \"key\") signer.type = 0;else if (signer.type === \"tx\") signer.type = 1;else if (signer.type === \"hash\") signer.type = 2;\n  return signer;\n};\n/* Helpers */\n\n\nfunction notSupported(feature) {\n  return;\n  throw new Error(\"This feature is not supported yet: \".concat(feature, \".\"));\n}\n/* Export */\n\n\nmodule.exports = TrezorTransaction;","\"use strict\";\n/**\n * Tx Transformer\n *\n * Derives new formats from CosmicLink Transitional Description.\n */\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _require = require(\"cosmic-lib\"),\n    CosmicLink = _require.CosmicLink,\n    specs = _require.specs;\n/* Definition */\n\n\nvar TxTransformer = function TxTransformer(rules, tx) {\n  var _this = this;\n\n  _classCallCheck(this, TxTransformer);\n\n  var tdesc = new CosmicLink(tx).tdesc;\n  specs.transactionOptionalFields.forEach(function (field) {\n    var value = tdesc[field];\n    if (value) _this[field] = transform.field(rules, field, value);\n  });\n  this.operations = tdesc.operations.map(function (o) {\n    return transform.odesc(rules, o);\n  });\n};\n/* Routines */\n\n\nvar transform = {};\n\ntransform.field = function (rules, field, value) {\n  var type = specs.fieldType[field];\n  return rules[type] ? rules[type](value) : value;\n};\n\ntransform.odesc = function (rules, odesc) {\n  var result = {};\n\n  for (var field in odesc) {\n    result[field] = transform.field(rules, field, odesc[field]);\n  }\n\n  return result;\n};\n/* Export */\n\n\nmodule.exports = TxTransformer;","\"use strict\";\n/**\n * This is a convenient wrapper around the official\n * [TrezorConnect](https://github.com/trezor/connect) library.\n *\n *\n * It enables you to connect to Trezor devices and sign Stellar transactions in\n * a few lines of code:\n *\n * ```js\n * // Step 1: Register to Trezor Connect Manifest\n * trezorWallet.register(\"example.org\", \"dev@example.org\")\n *\n * // Step 2: Connect\n * await trezorWallet.connect()\n *\n * // Step 3: Get public key\n * const pubkey = trezorWallet.publicKey\n *\n * // Step 4: Sign\n * await trezorWallet.sign(transaction)\n * ```\n *\n * This library is browser-only.\n *\n * **Beta Release**\n *\n * This is a beta release that is made public for testing purpose. While the\n * library is stable & secure, several issues are still being worked out with\n * Trezor teams.\n *\n * A few operations & parameters are not supported yet. An explicit error\n * message will get thrown if you try to sign a transaction including them:\n *\n * - Binary text memo containing NULL characters,\n * - The `inflation` operation,\n * - The `manageData` operation,\n * - The `manageBuyOffer` operation,\n *\n * If you encounter an unexpected error, please play the game and [fill an\n * issue](https://github.com/cosmic-plus/js-trezor-wallet/issues/new/choose).\n *\n * The public release will possibly contain one or more breaking changes.\n * Please check the [changelog](CHANGELOG.md) before upgrading.\n *\n * @exports trezorWallet\n */\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar trezor = exports;\n\nvar TrezorConnect = require(\"trezor-connect\")[\"default\"];\n\nvar Buffer = require(\"@cosmic-plus/base/es5/buffer\");\n\nvar TrezorTx = require(\"./trezor-tx\");\n/* Configuration */\n\n\nvar BIP_PATH = \"m/44'/148'\";\n/* Properties */\n\n/**\n * PublicKey of the connected account.\n * @var {String}\n */\n\ntrezor.publicKey = null;\n/**\n * BIP path of the connected account.\n * @var {String}\n */\n\ntrezor.path = null;\n/* Methods */\n\nvar connection;\n/**\n * Registers yourself in the Trezor Connect Manifest. This provides them the\n * ability to reach you in case of any required maintenance.\n *\n * This subscription is mandatory.\n *\n * @see [Trezor Connect Manifest](https://github.com/trezor/connect/blob/develop/docs/index.md#trezor-connect-manifest)\n *\n * @param email {String} Developer email.\n * @param appUrl {String} Application URL.\n */\n\ntrezor.register = function (appUrl, email) {\n  TrezorConnect.manifest({\n    email: email,\n    appUrl: appUrl\n  });\n};\n/**\n * Waits for a connection with a Trezor wallet. If **account** is not provided,\n * acount 1 is used. The library will stop listening for a connection if\n * `trezorWallet.disconnect()` is called.\n *\n * Once the connection is established, you can use `await\n * trezorWallet.connect()` again at any time to ensure the device is still\n * connected.\n *\n * When switching to another **account**, it is possible to `await\n * trezorWallet.connect(new_account_number)` without prior disconnection.\n *\n * _Note:_ To stay consistent with the way Trezor list accounts, **account**\n * starts at 1 and account 1 BIP path is `m/44'/148'/0'`.\n *\n * @async\n * @param [account=1] {Number|String} - Either the account number (starts at 1)\n *     or a BIP path (e.g: \"m/44'/148'/0'\").\n */\n\n\ntrezor.connect =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var account,\n      path,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          account = _args.length > 0 && _args[0] !== undefined ? _args[0] : trezor.path;\n          path = account || \"\".concat(BIP_PATH, \"/0'\");\n\n          if (!(typeof account === \"number\")) {\n            _context.next = 6;\n            break;\n          }\n\n          if (!(account < 1)) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error(\"Account number starts at 1.\");\n\n        case 5:\n          path = \"\".concat(BIP_PATH, \"/\").concat(account - 1, \"'\");\n\n        case 6:\n          // Update properties.\n          if (trezor.path !== path) {\n            reset();\n            trezor.path = path;\n          } // Connect & update data only when needed.\n\n\n          if (!connection) connection = connect();\n          return _context.abrupt(\"return\", connection);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\n\nfunction connect() {\n  return _connect.apply(this, arguments);\n}\n/**\n * Prompts the user to accept **transaction** using the connected account of\n * their Trezor device.\n *\n * If the user accepts, adds the signature to **transaction**. Else, throws an\n * error.\n *\n * @async\n * @param transaction {Transaction} A StellarSdk Transaction\n */\n\n\nfunction _connect() {\n  _connect = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // eslint-disable-next-line no-console\n            console.log(\"Attempting Trezor connection...\");\n            connection = TrezorConnect.stellarGetAddress({\n              path: trezor.path,\n              showOnTrezor: false\n            });\n            _context3.next = 4;\n            return connection;\n\n          case 4:\n            result = _context3.sent;\n\n            if (!result.success) {\n              _context3.next = 10;\n              break;\n            }\n\n            trezor.publicKey = result.payload.address;\n            onConnect();\n            _context3.next = 11;\n            break;\n\n          case 10:\n            throw new Error(result.payload.error);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _connect.apply(this, arguments);\n}\n\ntrezor.sign =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(transaction) {\n    var StellarSdk, result, keypair, hint, signature, decorated;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            StellarSdk = require(\"@cosmic-plus/base/es5/stellar-sdk\");\n\n            if (trezor.publicKey) {\n              _context2.next = 3;\n              break;\n            }\n\n            throw new Error(\"No Trezor connected.\");\n\n          case 3:\n            _context2.next = 5;\n            return TrezorConnect.stellarSignTransaction({\n              path: trezor.path,\n              networkPassphrase: transaction.networkPassphrase,\n              transaction: new TrezorTx(transaction)\n            });\n\n          case 5:\n            result = _context2.sent;\n\n            if (result.success) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error(result.payload.error);\n\n          case 8:\n            keypair = StellarSdk.Keypair.fromPublicKey(trezor.publicKey);\n            hint = keypair.signatureHint();\n            signature = Buffer.from(result.payload.signature, \"hex\");\n            decorated = new StellarSdk.xdr.DecoratedSignature({\n              hint: hint,\n              signature: signature\n            });\n            transaction.signatures.push(decorated); // DEBUG\n\n            console.log(\"signed\", transaction);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Close the connection with the Trezor device, or stop listening for one in\n * case a connection has not been established yet.\n */\n\n\ntrezor.disconnect = function () {\n  try {\n    // Try to close iframe. TODO: find a more reliable method\n    TrezorConnect.cancel();\n  } catch (error) {\n    null;\n  }\n\n  onDisconnect();\n};\n\nfunction reset() {\n  connection = null;\n  var fields = [\"path\", \"publicKey\"];\n  fields.forEach(function (name) {\n    return trezor[name] = null;\n  });\n}\n/* Event handlers */\n\n\nTrezorConnect.on(\"DEVICE_EVENT\", function (event) {\n  // eslint-disable-next-line no-console\n  console.log(\"DEVICE_EVENT\", console.log(event));\n  if (event.type === \"device-disconnect\") onDisconnect();else if (event.type === \"device-connect\") onConnect();\n});\n/**\n * _Function_ to execute on each connection.\n *\n * @category event\n * @var {Function}\n */\n\ntrezor.onConnect = null;\n\nfunction onConnect() {\n  // eslint-disable-next-line no-console\n  console.log(\"Trezor connected\");\n  if (typeof trezor.onConnect === \"function\") trezor.onConnect();\n}\n/**\n * _Function_ to execute on each disconnection.\n *\n * @category event\n * @var {Function}\n */\n\n\ntrezor.onDisconnect = null;\n\nfunction onDisconnect() {\n  // eslint-disable-next-line no-console\n  console.log(\"Trezor disconnected\");\n  reset();\n  if (typeof trezor.onDisconnect === \"function\") trezor.onDisconnect();\n}"],"sourceRoot":""}